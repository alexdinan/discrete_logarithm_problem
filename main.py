import argparse
from sympy import isprime
import algorithms.rho_dp_teske as rho
import algorithms.linear_sieve as sieve


def main():
    parser = argparse.ArgumentParser(description="Solves the DLP: Finds integer x in [0, n-1] such that g^x â‰¡ h mod p")

    parser.add_argument("p", type=int, help="Prime modulus")
    parser.add_argument("g", type=int, help="Generator element")
    parser.add_argument("h", type=int, help="Target element")
    parser.add_argument("n", type=int, help="Size of group generated by g")

    args = parser.parse_args()

    try:
        dlp(args.p, args.g, args.h, args.n)
    except ValueError as e:
        print(f"ERROR: {e}")


def dlp(p, g, h, n):
    if not isprime(p):
        raise ValueError(f"p = {p} is not prime")
    
    if not isprime(n):
        raise ValueError(f"n = {n} is not prime")
    
    if (p - 1) % n:
        raise ValueError(f"n = {n} must divide p - 1 = {p - 1}")
    
    if pow(g, n, p) != 1:
        raise ValueError(f"g = {g} does not generate a order-{n} subgroup of F_{p}")
    
    if pow(h, n, p) != 1:
        raise ValueError(f"h = {h} does not lie in the group generated by g = {g}")
    
    if n < 2 ** 40:
        print("Using Pollard's Rho algorithm...")
        x = rho.dlp(p, g, h, n)
    else:
        print("Using the Linear Sieve algorithm...")
        x = sieve.dlp(p, g, h, n)

    print(f"Solution found x = {x}")
    

if __name__ == "__main__":
    main()